# If N means the number of units
calc.power(
alpha = 0.05,
main.arg = nrow(data.q5),
gamma = 0.5,
tau = 0.05,
variance = stratified.variance,
N = FALSE
)
# If N means the number of strata...
calc.power(
alpha = 0.05,
main.arg = 0.8,
gamma = 0.5,
tau = 0.05,
variance = stratified.variance,
N = TRUE
)
# If N menas the number of clusters...
calc.power(
alpha = 0.05,
main.arg = 50,
gamma = 0.5,
tau = 0.05,
variance = stratified.variance,
N = FALSE
)
calc.power(
alpha = 0.05,
main.arg = nrow(data.q5),
gamma = 0.5,
tau = 0.05,
variance = stratified.variance,
N = FALSE
)
calc.power(
alpha = 0.05,
main.arg = 0.8,
gamma = 0.5,
tau = 0.05,
variance = var(data$lwage),
N = TRUE
)
calc.power(
alpha = 0.05,
main.arg = 0.8,
gamma = 0.5,
tau = exp(5.95) - exp(5.9),
variance = var(data$wage),
N = TRUE
)
# If N means the number of units
calc.power(
alpha = 0.05,
main.arg = nrow(data.q5),
gamma = 0.5,
tau = 0.05,
variance = stratified.variance,
N = FALSE
)
# If N means the number of strata...
calc.power(
alpha = 0.05,
main.arg = 0.8,
gamma = 0.5,
tau = 0.05,
variance = stratified.variance,
N = TRUE
)
# If N menas the number of clusters...
calc.power(
alpha = 0.05,
main.arg = 50,
gamma = 0.5,
tau = 0.05,
variance = stratified.variance,
N = FALSE
)
# If N means the number of units
calc.power(
alpha = 0.05,
main.arg = nrow(data.q5),
gamma = 0.5,
tau = 0.05,
variance = stratified.variance,
N = FALSE
)
# If N means the number of strata...
calc.power(
alpha = 0.05,
main.arg = 5,
gamma = 0.5,
tau = 0.05,
variance = stratified.variance,
N = FALSE
)
# If N menas the number of clusters...
calc.power(
alpha = 0.05,
main.arg = 50,
gamma = 0.5,
tau = 0.05,
variance = stratified.variance,
N = FALSE
)
nrow(data.q5)
cluster.variance <-
liang.zeger(
treatment.vector = data.q3$assignment,
outcome.vector = data.q3$lwage,
fitted.vector = data.q3$fitted.value,
cluster.vector = data.q3$sob
)
# If N means the number of clusters
calc.power(
alpha = 0.05,
main.arg = 50,
gamma = 0.5,
tau = 0.05,
variance = cluster.variance,
N = FALSE
)
cluster.variance
cluster.variance <-
liang.zeger(
treatment.vector = data.q3$assignment,
outcome.vector = data.q3$lwage,
fitted.vector = data.q3$fitted.value,
cluster.vector = data.q3$sob
)
cluster.variance
# If N means the number of clusters
calc.power(
alpha = 0.05,
main.arg = 50,
gamma = 0.5,
tau = 0.05,
variance = cluster.variance,
N = FALSE
)
cluster.variance <-
liang.zeger(
treatment.vector = data.q3$assignment,
outcome.vector = data.q3$lwage,
fitted.vector = data.q3$fitted.value,
cluster.vector = data.q3$sob
)
cluster.variance
# If N means the number of clusters
calc.power(
alpha = 0.05,
main.arg = nrow(data.q3),
gamma = 0.5,
tau = 0.05,
variance = cluster.variance,
N = FALSE
)
exp(5.95) - exp(5.9)
calc.power(
alpha = 0.05,
main.arg = 0.8,
gamma = 0.5,
tau = exp(5.95) - exp(5.9),
variance = var(data$wage),
N = TRUE
)
var(data$wage)
sqrt(var(data$wage))
# A function for power estimation
# If N = TRUE, calculates a number for a requested power
# if N = FALSE, calculates power given sample size
# main.arg is either a requesed power if N = TRUE, or a sample size if N = FALSE
calc.power <- function(alpha,
main.arg,
gamma,
tau,
variance,
N = TRUE){
# Going to use this term a lot
denominator = ((tau^2)/variance) #* gamma * (1-gamma)
# Solving for an N to achieve a given power
if(N == TRUE){
# Need the requested power
beta = main.arg
# Here's the formula
numerator = qnorm(beta) + qnorm(1 - (alpha/2))
# Return N
output = ((numerator)^2)/denominator
}
# Solving for power given a sample size
if(N == FALSE){
# Need  the requested N
n = main.arg
# Formula
normaland = sqrt(n * denominator) - qnorm(1 - (alpha/2))
# Return power
output = pnorm(normaland)
}
return(output)
}
calc.power(
alpha = 0.05,
main.arg = 0.8,
gamma = 0.5,
tau = 0.05,
variance = var(data$lwage),
N = TRUE
)
# Assignment vector function
# Takes a number of units, a prob of treatment
# If Bernoulli = TRUE, gives a Bernoulli treatment assignment with p = treat.param
# if Bernoulli = FALSE, gives block treatment with treat.param = number of units treated
assignment.vector <- function(N.units,
treat.param,
bernoulli = TRUE){
# Bernoulli assignment
if(bernoulli == TRUE){
output.vector = as.numeric(rbernoulli(10, p = 0.5))
}
# Block assignment
if(bernoulli == FALSE){
# Get correc number of treated and control assignments
output.vector = c(
rep(0, N.units - treat.param),
rep(1, treat.param)
)
# Randomize the assignment
output.vector = sample(output.vector)
}
return(output.vector)
}
# Function to calculate the Liang-Zeger cluster variance
# Takes as input a treatmet assignment and outcome vector,
# A vector of fitted values, and a vector of cluster assignments
liang.zeger <- function(treatment.vector,
outcome.vector,
fitted.vector,
cluster.vector){
# Vectors should have same length
if(!(length(treatment.vector) == length(outcome.vector) &
length(fitted.vector) == length(cluster.vector) &
length(outcome.vector) == length(fitted.vector))){
print("Vector lengths not equal")
stop()
}
# Treatment vector and unit difference from pscore
avg.treatment = mean(treatment.vector)
w.i = treatment.vector - avg.treatment
# Sum includes indicator for cluster assignment
clusters = unique(cluster.vector)
cluster.summand = rep(NA, length(clusters))
# Now the main operation
for(cluster in clusters){
# Which rows have the right cluster?
index = cluster.vector == cluster
# Get the data for this cluster
outcome.cluster = outcome.vector[index]
w.i.cluster = w.i[index]
fitted.cluster = fitted.vector[index]
# Now calculate the sum for the cluster
summand = (outcome.cluster - fitted.cluster)*w.i.cluster
cluster.summand[clusters == cluster] = sum(summand)^2
}
# And sum across clusters
inner = sum(cluster.summand)
# Pre and post multiply the squared residual term by...
outer.denom = (1/length(outcome.vector)) * sum(w.i^2)
outer = 1/outer.denom
# Giving the variance estimate
output = (outer * inner * outer) * (1/length(outcome.vector))
return(output)
}
# Here we have 50 clusters
state.assignment <-
as.data.frame(unique(data$sob)) %>%
rename(
cluster = 1
) %>%
mutate(
assignment = assignment.vector(
N = 50,
treat.param = 25,
bernoulli = FALSE
)
)
# Stitch the treatment assignment into the main data
data.q3 <-
left_join(
data,
state.assignment,
by = c("sob" = "cluster")
)
# Get the parameter estimates and fitted values
units.treated = data.q3[data.q3$assignment==1,]
units.control = data.q3[data.q3$assignment==0,]
dim = mean(units.treated$lwage) - mean(units.control$lwage)
print(paste("TE Estimate: ", dim))
data.q3 <-
data.q3 %>%
mutate(
fitted.value =
ifelse(
assignment == 1,
mean(units.treated$lwage),
mean(units.control$lwage)
)
)
cluster.variance <-
liang.zeger(
treatment.vector = data.q3$assignment,
outcome.vector = data.q3$lwage,
fitted.vector = data.q3$fitted.value,
cluster.vector = data.q3$sob
)
cluster.variance
# If N means the number of clusters
calc.power(
alpha = 0.05,
main.arg = nrow(data.q3),
gamma = 0.5,
tau = 0.05,
variance = cluster.variance,
N = FALSE
)
calc.power(
alpha = 0.05,
main.arg = 0.8,
gamma = 0.5,
tau = exp(5.95) - exp(5.9),
variance = var(data$wage),
N = TRUE
)
var(data$wage)
sqrt(var(data$wage))
data.q4 <-
data.q3 %>%
mutate(
fitted.value =
ifelse(
assignment == 1,
mean(units.treated$wage),
mean(units.control$wage)
)
)
cluster.variance.q4 <-
liang.zeger(
treatment.vector = data.q4$assignment,
outcome.vector = data.q4$wage,
fitted.vector = data.q4$fitted.value,
cluster.vector = data.q4$sob
)
# If N means the number of clusters
calc.power(
alpha = 0.05,
main.arg = 50,
gamma = 0.5,
tau = exp(5.95) - exp(5.9),
variance = cluster.variance.q4,
N = FALSE
)
data.q4 <-
data.q3 %>%
mutate(
fitted.value =
ifelse(
assignment == 1,
mean(units.treated$wage),
mean(units.control$wage)
)
)
cluster.variance.q4 <-
liang.zeger(
treatment.vector = data.q4$assignment,
outcome.vector = data.q4$wage,
fitted.vector = data.q4$fitted.value,
cluster.vector = data.q4$sob
)
# If N means the number of clusters
calc.power(
alpha = 0.05,
main.arg = nrow(data$q4),
gamma = 0.5,
tau = exp(5.95) - exp(5.9),
variance = cluster.variance.q4,
N = FALSE
)
data.q4 <-
data.q3 %>%
mutate(
fitted.value =
ifelse(
assignment == 1,
mean(units.treated$wage),
mean(units.control$wage)
)
)
cluster.variance.q4 <-
liang.zeger(
treatment.vector = data.q4$assignment,
outcome.vector = data.q4$wage,
fitted.vector = data.q4$fitted.value,
cluster.vector = data.q4$sob
)
# If N means the number of clusters
calc.power(
alpha = 0.05,
main.arg = 50,
gamma = 0.5,
tau = exp(5.95) - exp(5.9),
variance = cluster.variance.q4,
N = FALSE
)
data.q4 <-
data.q3 %>%
mutate(
fitted.value =
ifelse(
assignment == 1,
mean(units.treated$wage),
mean(units.control$wage)
)
)
cluster.variance.q4 <-
liang.zeger(
treatment.vector = data.q4$assignment,
outcome.vector = data.q4$wage,
fitted.vector = data.q4$fitted.value,
cluster.vector = data.q4$sob
)
# If N means the number of clusters
calc.power(
alpha = 0.05,
main.arg = nrow(data.q4),
gamma = 0.5,
tau = exp(5.95) - exp(5.9),
variance = cluster.variance.q4,
N = FALSE
)
# Order states by size
clusters <-
data %>%
group_by(sob) %>%
mutate(N = n()) %>%
arrange(N) %>%
dplyr::select(
sob,
N
) %>%
dplyr::distinct()
# And stratify by size
clusters$strata = rep(1:5, each = 10)
# Stitch stratum assignment to the data
data.q5 <-
left_join(
data,
clusters,
by = c("sob" = "sob")
) %>%
dplyr::select(-N)
# Need within-stratum treatment assignment
data.q5$assignment = 0
# Loop through the strata
for(i in 1:5){
data.stratum = data.q5[data.q5$strata == i,]
state.assignment <-
as.data.frame(unique(data.stratum$sob)) %>%
rename(
cluster = 1
) %>%
mutate(
assignment = assignment.vector(
N = 10,
treat.param = 5,
bernoulli = FALSE
)
)
data.stratum <-
left_join(
dplyr::select(
data.stratum,
-assignment),
state.assignment,
by = c("sob" = "cluster")
)
data.q5$assignment[data.q5$strata == i] = data.stratum$assignment
}
calc.power(
alpha = 0.05,
main.arg = nrow(data.q5),
gamma = 0.5,
tau = 0.05,
variance = stratified.variance,
N = FALSE
)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
set.seed(1966)
library(dplyr)
library(data.table)
library(stringr)
library(DescTools)
library(fixest)
library(stargazer)
library(randomForestSRC)
library(parallel)
library(survival)
library(zoo)
library(wCorr)
library(tidyr)
library(ggplot2)
# Read data --------------------------------------------------------------------
ana.dist = fread("../../data/output/analysis/district_regressions.csv")
View(ana.dist)
