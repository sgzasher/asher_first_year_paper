)
) %>%
dplyr::select(
CDSCode, trustee, switcher, switch.type, causal
)
# Then stitch in NCESDist
df.mag <-
left_join(
df.mag,
dplyr::select(frame.district, CDSCode, NCESDist),
by = "NCESDist"
)
# Then stitch in NCESDist
df.mag <-
left_join(
df.mag,
dplyr::select(frame.district, CDSCode, NCESDist),
by = "CDSCode"
)
View(df.mag)
# Electoral
df.mag <- fread("../../data/replication_directories/magazinnik/panel_agg.csv")
# And change year to SY
df.mag <-
dplyr::mutate(
SY = paste0(as.character(year),
"-",
str_sub(
as.character(year+1),
3,
4
)
)
)
# And change year to SY
df.mag <-
df.mag %>%
dplyr::mutate(
SY = paste0(as.character(year),
"-",
str_sub(
as.character(year+1),
3,
4
)
)
)
# Electoral
df.mag <- fread("../../data/replication_directories/magazinnik/panel_agg.csv")
# Get relevant from A&M; also format CDS
df.mag <-
df.mag %>%
dplyr::mutate(
CDSCode = bit64::as.integer64(id)
) %>%
dplyr::select(
CDSCode, trustee, switcher, switch.type,
Spanish.Surname, Members, Hispanic, year
) %>%
dplyr::mutate(
Prop.Board = Spanish.Surname / Members,
causal = ifelse(
Prop.Board <= Hispanic & Hispanic >= 15, 1, 0
)
) %>%
dplyr::select(
CDSCode, trustee, switcher, switch.type, causal, year
)
# Then stitch in NCESDist
df.mag <-
left_join(
df.mag,
dplyr::select(frame.district, CDSCode, NCESDist),
by = "CDSCode"
)
# And change year to SY
df.mag <-
df.mag %>%
dplyr::mutate(
SY = paste0(as.character(year),
"-",
str_sub(
as.character(year+1),
3,
4
)
)
)
# Function: get the correct variables from census data given a list of GISJOINs
census.data <- function(row.dist){
rel.rows = unlist(row.dist$BG.List)
data.relevant <-
df.census %>%
dplyr::filter(
GISJOIN %in% rel.rows
)
data.output <-
summarise(
data.relevant,
Tot.HH.Occ  = sum(FZC001 * FY4001),
Tot.Income = sum(HG4001 * FXS001),
across(
FXS001:FY4001,
sum,
.names = "{col}"
),
across(
F15001:FW7002,
sum,
.names = "{col}"
),
across(
HD1001:HF5016,
sum,
.names = "{col}"
),
across(
HK4001:HK4098,
sum,
.names = "{col}"
)
)
data.output <-
dplyr::mutate(
data.output,
Tot.HH.Occ = Tot.HH.Occ / FY4001,
Tot.Income = Tot.Income / FXS001
) %>%
dplyr::rename(
FZC001 = Tot.HH.Occ,
HG4001 = Tot.Income
)
data.output$NCESDist = row.dist$NCESDist
# Dissimilarity calculation
dist.tot.white = data.output$FYF001
dist.tot.hisp = data.output$FXZ001
data.relevant$summand = abs((FYF001 / dist.tot.white) - (FXZ001 / dist.tot.hisp))
data.out2 <-
data.relevant %>%
summarise(
CEN.Dissim = func.dissim(summand)
)
data.output <-
bind_cols(
data.output,
data.out2
)
return(data.output)
}
censs.data(frame.dist[1,])
census.data(frame.dist[1,])
# Script Target: Read in census data w/ geometry. Here, getting the block
# groups assigned to the right districts. Then, in the cleaning scripts, will
# get district-level variables if we need any.
# Note: county offices of education will just map to county-level data...
# Packages ---------------------------------------------------------------------
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
set.seed(1966)
library(dplyr)
library(data.table)
library(haven)
library(purrr)
library(readxl)
library(lubridate)
library(sf)
library(parallel)
library(stringdist)
library(stringr)
library(DescTools)
# Packages ---------------------------------------------------------------------
geom.dist <- read_sf("../../data/raw/geospatial/district_boundary/2000_composite/schooldistrict_sy9900_tl00.shp")
geom.bg <- read_sf("../../data/raw/geospatial/nhgis0014_shape/nhgis0014_shapefile_tl2000_060_blck_grp_2000/CA_blck_grp_2000.shp")
geom.sch <- read_sf("../../data/raw/geospatial/school_location/EDGE_GEOCODE_PUBLICSCH_1617/EDGE_GEOCODE_PUBLICSCH_1617/EDGE_GEOCODE_PUBLICSCH_1617.shp")
df.census.a <- fread("../../data/raw/census/nhgis0014_csv/nhgis0014_ds147_2000_blck_grp.csv")
df.census.b <- fread("../../data/raw/census/nhgis0014_csv/nhgis0014_ds152_2000_blck_grp.csv")
frame.dist <- fread("../../data/output/frames/frame_district.csv")
frame.sch <- fread("../../data/output/frames/frame_school.csv")
# Bind Census Data -------------------------------------------------------------
df.census <-
bind_cols(
df.census.a,
df.census.b[,34:200]
)
# Relevant Districts: LEA Codes ------------------------------------------------
# Just california
geom.dist = geom.dist[geom.dist$STATEFP00 == "06",]
# NCESCode across many variables
geom.dist <-
geom.dist %>%
dplyr::mutate(
code = ifelse(
!(is.na(SCSDLEA00)),
SCSDLEA00,
ifelse(
!(is.na(ELSDLEA00)),
ELSDLEA00,
UNSDLEA00
)
)
)
# Reconstruct
geom.dist <-
geom.dist %>%
dplyr::mutate(
NCESDist = as.integer(paste0(substr(STATEFP00, 2, 2), code))
)
# COEs will happen at county level
frame.dist.coe = frame.dist[frame.dist$DOC == 0,]
frame.dist = frame.dist[frame.dist$DOC != 0,]
# Don't want all of that dat...
geom.dist <-
geom.dist %>%
dplyr::select(
NCESDist
)
# Now bind; a few missing and they will unfortunately just stay that way
frame.dist <-
left_join(
frame.dist,
geom.dist,
by = "NCESDist"
)
frame.dist <- st_as_sf(frame.dist)
# Block Groups to Districts ----------------------------------------------------
# BG Centriods
bg.centroids = st_centroid(geom.bg)
# CRS
bg.centroids <-
st_transform(
bg.centroids,
crs = st_crs(frame.dist)
)
# List of BGs inside each district
dist.bg <-
st_intersects(
x = frame.dist$geometry,
y = bg.centroids
)
# Want the actual BG names
frame.dist$BG.List <-
lapply(
dist.bg,
function(x){
as.list(geom.bg[x,]$GISJOIN)
}
)
# List of BGs inside each COE
frame.dist.coe$BG.List <-
lapply(
lapply(frame.dist.coe$County, function(x){which(df.census$COUNTY == x)}),
function(x){
as.list(df.census[x,]$GISJOIN)
}
)
# Rejoin all
frame.dist <-
bind_rows(
frame.dist,
frame.dist.coe
)
# Block groups to schools ------------------------------------------------------
# Geospatial from the CDE lat/longs
# Notice we are forced to drop a bunch of closures
frame.sch.geom <-
st_as_sf(
frame.sch[frame.sch$Latitude != "No Data"],
coords = c("Longitude", "Latitude"),
crs = st_crs(frame.dist)
)
# Block group geometry
geom.bg <-
st_transform(
geom.bg,
crs = st_crs(frame.dist)
)
# Find the BG the school is within
sf_use_s2(FALSE)
sch.bg =
st_within(
frame.sch.geom$geometry,
geom.bg$geometry
)
# And get the BG IDs
frame.sch.geom$BG.List <-
lapply(
sch.bg,
function(x){
geom.bg[x,]$GISJOIN
}
)
# School-Level All Variables ---------------------------------------------------
# Full frame
frame.sch <-
frame.sch %>%
dplyr::select(
CDSCode, NCESDist, NCESSchool
)
# With the BG codes
frame.sch <-
left_join(
frame.sch,
dplyr::select(
frame.sch.geom,
CDSCode,
BG.List
)
)
frame.sch <- unnest(frame.sch, cols = "BG.List")
# Extract census data
frame.sch <-
left_join(
frame.sch,
df.census,
by = c("BG.List" = "GISJOIN")
)
# District-Level All Variables -------------------------------------------------
# Function: dissimilarity from summand
func.dissim <- function(vector){
return(
0.5 * sum(vector, na.rm = T)
)
}
# Function: get the correct variables from census data given a list of GISJOINs
census.data <- function(row.dist){
rel.rows = unlist(row.dist$BG.List)
data.relevant <-
df.census %>%
dplyr::filter(
GISJOIN %in% rel.rows
)
data.output <-
summarise(
data.relevant,
Tot.HH.Occ  = sum(FZC001 * FY4001),
Tot.Income = sum(HG4001 * FXS001),
across(
FXS001:FY4001,
sum,
.names = "{col}"
),
across(
F15001:FW7002,
sum,
.names = "{col}"
),
across(
HD1001:HF5016,
sum,
.names = "{col}"
),
across(
HK4001:HK4098,
sum,
.names = "{col}"
)
)
data.output <-
dplyr::mutate(
data.output,
Tot.HH.Occ = Tot.HH.Occ / FY4001,
Tot.Income = Tot.Income / FXS001
) %>%
dplyr::rename(
FZC001 = Tot.HH.Occ,
HG4001 = Tot.Income
)
data.output$NCESDist = row.dist$NCESDist
# Dissimilarity calculation
dist.tot.white = data.output$FYF001
dist.tot.hisp = data.output$FXZ001
data.relevant$summand = abs((FYF001 / dist.tot.white) - (FXZ001 / dist.tot.hisp))
data.out2 <-
data.relevant %>%
summarise(
CEN.Dissim = func.dissim(summand)
)
data.output <-
bind_cols(
data.output,
data.out2
)
return(data.output)
}
census.data(frame.dist[1,])
# Function: get the correct variables from census data given a list of GISJOINs
census.data <- function(row.dist){
rel.rows = unlist(row.dist$BG.List)
data.relevant <-
df.census %>%
dplyr::filter(
GISJOIN %in% rel.rows
)
print(colnames(data.relevant))
data.output <-
summarise(
data.relevant,
Tot.HH.Occ  = sum(FZC001 * FY4001),
Tot.Income = sum(HG4001 * FXS001),
across(
FXS001:FY4001,
sum,
.names = "{col}"
),
across(
F15001:FW7002,
sum,
.names = "{col}"
),
across(
HD1001:HF5016,
sum,
.names = "{col}"
),
across(
HK4001:HK4098,
sum,
.names = "{col}"
)
)
data.output <-
dplyr::mutate(
data.output,
Tot.HH.Occ = Tot.HH.Occ / FY4001,
Tot.Income = Tot.Income / FXS001
) %>%
dplyr::rename(
FZC001 = Tot.HH.Occ,
HG4001 = Tot.Income
)
data.output$NCESDist = row.dist$NCESDist
# Dissimilarity calculation
dist.tot.white = data.output$FYF001
dist.tot.hisp = data.output$FXZ001
data.relevant$summand = abs((FYF001 / dist.tot.white) - (FXZ001 / dist.tot.hisp))
data.out2 <-
data.relevant %>%
summarise(
CEN.Dissim = func.dissim(summand)
)
data.output <-
bind_cols(
data.output,
data.out2
)
return(data.output)
}
census.data(frame.dist[1,])
# Function: get the correct variables from census data given a list of GISJOINs
census.data <- function(row.dist){
rel.rows = unlist(row.dist$BG.List)
data.relevant <-
df.census %>%
dplyr::filter(
GISJOIN %in% rel.rows
)
data.output <-
summarise(
data.relevant,
Tot.HH.Occ  = sum(FZC001 * FY4001),
Tot.Income = sum(HG4001 * FXS001),
across(
FXS001:FY4001,
sum,
.names = "{col}"
),
across(
F15001:FW7002,
sum,
.names = "{col}"
),
across(
HD1001:HF5016,
sum,
.names = "{col}"
),
across(
HK4001:HK4098,
sum,
.names = "{col}"
)
)
data.output <-
dplyr::mutate(
data.output,
Tot.HH.Occ = Tot.HH.Occ / FY4001,
Tot.Income = Tot.Income / FXS001
) %>%
dplyr::rename(
FZC001 = Tot.HH.Occ,
HG4001 = Tot.Income
)
data.output$NCESDist = row.dist$NCESDist
# Dissimilarity calculation
dist.tot.white = data.output$FYF001
dist.tot.hisp = data.output$FXZ001
data.relevant$summand <-
abs((data.relevant$FYF001 / dist.tot.white) - (data.relevant$FXZ001 / dist.tot.hisp))
data.out2 <-
data.relevant %>%
summarise(
CEN.Dissim = func.dissim(summand)
)
data.output <-
bind_cols(
data.output,
data.out2
)
return(data.output)
}
census.data(frame.dist[1,])
View(df.cdd)
View(df.cdd)
